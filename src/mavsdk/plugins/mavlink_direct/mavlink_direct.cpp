// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/mavlink_direct/mavlink_direct.proto)

#include <iomanip>

#include "mavlink_direct_impl.h"
#include "plugins/mavlink_direct/mavlink_direct.h"

namespace mavsdk {

using MavlinkMessage = MavlinkDirect::MavlinkMessage;

MavlinkDirect::MavlinkDirect(System& system) :
    PluginBase(),
    _impl{std::make_unique<MavlinkDirectImpl>(system)}
{}

MavlinkDirect::MavlinkDirect(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{std::make_unique<MavlinkDirectImpl>(system)}
{}

MavlinkDirect::~MavlinkDirect() {}

MavlinkDirect::Result MavlinkDirect::send_message(MavlinkMessage message) const
{
    return _impl->send_message(message);
}

MavlinkDirect::MessageHandle
MavlinkDirect::subscribe_message(std::string message_name, const MessageCallback& callback)
{
    return _impl->subscribe_message(message_name, callback);
}

void MavlinkDirect::unsubscribe_message(MessageHandle handle)
{
    _impl->unsubscribe_message(handle);
}

bool operator==(const MavlinkDirect::MavlinkMessage& lhs, const MavlinkDirect::MavlinkMessage& rhs)
{
    return (rhs.message_name == lhs.message_name) && (rhs.system_id == lhs.system_id) &&
           (rhs.component_id == lhs.component_id) && (rhs.target_system == lhs.target_system) &&
           (rhs.target_component == lhs.target_component) && (rhs.fields_json == lhs.fields_json);
}

std::ostream& operator<<(std::ostream& str, MavlinkDirect::MavlinkMessage const& mavlink_message)
{
    str << std::setprecision(15);
    str << "mavlink_message:" << '\n' << "{\n";
    str << "    message_name: " << mavlink_message.message_name << '\n';
    str << "    system_id: " << mavlink_message.system_id << '\n';
    str << "    component_id: " << mavlink_message.component_id << '\n';
    str << "    target_system: " << mavlink_message.target_system << '\n';
    str << "    target_component: " << mavlink_message.target_component << '\n';
    str << "    fields_json: " << mavlink_message.fields_json << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, MavlinkDirect::Result const& result)
{
    switch (result) {
        case MavlinkDirect::Result::Unknown:
            return str << "Unknown";
        case MavlinkDirect::Result::Success:
            return str << "Success";
        case MavlinkDirect::Result::Error:
            return str << "Error";
        case MavlinkDirect::Result::InvalidMessage:
            return str << "Invalid Message";
        case MavlinkDirect::Result::InvalidField:
            return str << "Invalid Field";
        case MavlinkDirect::Result::ConnectionError:
            return str << "Connection Error";
        case MavlinkDirect::Result::NoSystem:
            return str << "No System";
        case MavlinkDirect::Result::Timeout:
            return str << "Timeout";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk